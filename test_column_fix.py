#!/usr/bin/env python3
"""
Test Script ƒë·ªÉ validate to√†n b·ªô booking save flow
Ki·ªÉm tra xem fix c√≥ ho·∫°t ƒë·ªông kh√¥ng
"""

import os
import sys
from datetime import datetime
from dotenv import load_dotenv

# Add project path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from logic import append_multiple_bookings_to_sheet

def test_booking_save():
    """Test save booking v·ªõi d·ªØ li·ªáu m·∫´u"""
    
    load_dotenv()
    GCP_CREDS_FILE_PATH = os.getenv("GCP_CREDS_FILE_PATH")
    DEFAULT_SHEET_ID = os.getenv("DEFAULT_SHEET_ID") 
    WORKSHEET_NAME = os.getenv("WORKSHEET_NAME")
    
    print("TESTING BOOKING SAVE FLOW")
    print("=" * 50)
    
    # T·∫°o d·ªØ li·ªáu test booking v·ªõi exact column mapping
    test_booking = {
        'S·ªë ƒë·∫∑t ph√≤ng': f'TEST_{datetime.now().strftime("%Y%m%d_%H%M%S")}',
        'T√™n ng∆∞·ªùi ƒë·∫∑t': 'Test User - Column Fix',
        'T√™n ch·ªó ngh·ªâ': 'Test Room Type',
        'Check-in Date': '2025-06-20',
        'Check-out Date': '2025-06-22',
        'Stay Duration': '2',
        'T√¨nh tr·∫°ng': 'OK',
        'T·ªïng thanh to√°n': 300000,
        'Gi√° m·ªói ƒë√™m': 150000,
        'Booking Date': datetime.now().strftime('%Y-%m-%d'),
        'Ng√†y ƒë·∫øn': 'ng√†y 20 th√°ng 6 nƒÉm 2025',
        'Ng√†y ƒëi': 'ng√†y 22 th√°ng 6 nƒÉm 2025',
        'V·ªã tr√≠': 'Test Location',
        'Th√†nh vi√™n Genius': 'Kh√¥ng',
        'ƒê∆∞·ª£c ƒë·∫∑t v√†o': datetime.now().strftime('%d th√°ng %m, %Y'),
        'Hoa h·ªìng': 30000,
        'Ti·ªÅn t·ªá': 'VND',
        'Ng∆∞·ªùi nh·∫≠n ti·ªÅn': '',
        'Ghi ch√∫ thanh to√°n': f'TEST BOOKING - Column Fix Test {datetime.now().strftime("%H:%M")}',
        'Ng∆∞·ªùi thu ti·ªÅn': '',
        'Taxi': ''
    }
    
    bookings_to_test = [test_booking]
    
    print(f"üìù Test booking created:")
    print(f"   ID: {test_booking['S·ªë ƒë·∫∑t ph√≤ng']}")
    print(f"   Guest: {test_booking['T√™n ng∆∞·ªùi ƒë·∫∑t']}")
    print(f"   Check-in: {test_booking['Check-in Date']}")
    print(f"   Total fields: {len(test_booking)}")
    
    try:
        print(f"\nüîÑ Attempting to save to Google Sheets...")
        
        append_multiple_bookings_to_sheet(
            bookings=bookings_to_test,
            gcp_creds_file_path=GCP_CREDS_FILE_PATH,
            sheet_id=DEFAULT_SHEET_ID,
            worksheet_name=WORKSHEET_NAME
        )
        
        print(f"‚úÖ SUCCESS: Test booking saved!")
        print(f"üìã Check Google Sheets for booking ID: {test_booking['S·ªë ƒë·∫∑t ph√≤ng']}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå ERROR: Test failed: {e}")
        import traceback
        traceback.print_exc()
        return False

def verify_booking_in_sheet():
    """Verify r·∫±ng test booking c√≥ trong sheet"""
    
    try:
        from logic import import_from_gsheet
        
        load_dotenv()
        GCP_CREDS_FILE_PATH = os.getenv("GCP_CREDS_FILE_PATH")
        DEFAULT_SHEET_ID = os.getenv("DEFAULT_SHEET_ID") 
        WORKSHEET_NAME = os.getenv("WORKSHEET_NAME")
        
        print(f"\nüîç Verifying booking in sheet...")
        
        df = import_from_gsheet(DEFAULT_SHEET_ID, GCP_CREDS_FILE_PATH, WORKSHEET_NAME)
        
        if df.empty:
            print(f"‚ùå Sheet is empty or couldn't load")
            return False
        
        print(f"üìä Sheet loaded: {len(df)} total bookings")
        
        # Look for test bookings
        test_bookings = df[df['Ghi ch√∫ thanh to√°n'].str.contains('TEST BOOKING', na=False)]
        
        if not test_bookings.empty:
            print(f"‚úÖ Found {len(test_bookings)} test booking(s):")
            for _, booking in test_bookings.iterrows():
                print(f"   - ID: {booking.get('S·ªë ƒë·∫∑t ph√≤ng', 'N/A')}")
                print(f"   - Guest: {booking.get('T√™n ng∆∞·ªùi ƒë·∫∑t', 'N/A')}")
                print(f"   - Note: {booking.get('Ghi ch√∫ thanh to√°n', 'N/A')}")
            return True
        else:
            print(f"‚ö†Ô∏è No test bookings found")
            return False
            
    except Exception as e:
        print(f"‚ùå Verification error: {e}")
        return False

if __name__ == "__main__":
    print("Column Fix Validation Test")
    print("=" * 50)
    
    # Test 1: Save booking
    save_success = test_booking_save()
    
    if save_success:
        # Test 2: Verify booking appears in sheet
        import time
        print(f"\n‚è≥ Waiting 3 seconds for Google Sheets sync...")
        time.sleep(3)
        
        verify_success = verify_booking_in_sheet()
        
        if verify_success:
            print(f"\nüéâ ALL TESTS PASSED!")
            print(f"‚úÖ Column mapping fix is working correctly")
            print(f"üìã Check your Google Sheets to see the new test booking")
        else:
            print(f"\n‚ö†Ô∏è Save succeeded but verification failed")
            print(f"   Check Google Sheets manually for the test booking")
    else:
        print(f"\n‚ùå TESTS FAILED")
        print(f"   Column mapping fix needs more work")
    
    print(f"\n" + "=" * 50)
