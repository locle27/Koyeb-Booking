import os
from flask import Flask, render_template, request, redirect, url_for, flash, jsonify, send_from_directory
from dotenv import load_dotenv
import json
from functools import lru_cache
from pathlib import Path
import pandas as pd
import plotly
import plotly.express as px
from datetime import datetime, timedelta
import calendar
import base64
import google.generativeai as genai
from io import BytesIO

# --- C√†i ƒë·∫∑t Ch·∫ø ƒë·ªô ---
# ƒê·∫∑t th√†nh True ƒë·ªÉ b·∫≠t thanh c√¥ng c·ª• dev v√† ch·∫ø ƒë·ªô debug.
# ƒê·∫∑t th√†nh False ƒë·ªÉ ch·∫°y ·ªü ch·∫ø ƒë·ªô production (t·∫Øt thanh c√¥ng c·ª•).
DEV_MODE = True  # B·∫≠t development mode ƒë·ªÉ t·ª± ƒë·ªông reload
# --------------------

# Import c√°c h√†m logic
from logic import (
    import_from_gsheet, create_demo_data,
    get_daily_activity, get_overall_calendar_day_info,
    extract_booking_info_from_image_content,
    export_data_to_new_sheet,
    append_multiple_bookings_to_sheet,
    delete_booking_by_id, update_row_in_gsheet,
    prepare_dashboard_data, delete_row_in_gsheet,
    delete_multiple_rows_in_gsheet,
    import_message_templates_from_gsheet,
    export_message_templates_to_gsheet
)

# C·∫•u h√¨nh
BASE_DIR = Path(__file__).resolve().parent
load_dotenv(BASE_DIR / ".env")

app = Flask(__name__, template_folder=BASE_DIR / "templates", static_folder=BASE_DIR / "static")

# S·ª≠ d·ª•ng bi·∫øn DEV_MODE ƒë·ªÉ c·∫•u h√¨nh app
app.config['ENV'] = 'production'  # Lu√¥n s·ª≠ d·ª•ng production mode
app.config['DEBUG'] = False  # Lu√¥n t·∫Øt debug mode
app.secret_key = os.getenv("FLASK_SECRET_KEY", "a_default_secret_key_for_development")

# V√¥ hi·ªáu h√≥a Debug Toolbar - ƒê√£ ho√†n to√†n b·ªã x√≥a
# KH√îNG import ho·∫∑c s·ª≠ d·ª•ng DebugToolbarExtension

@app.context_processor
def inject_dev_mode():
    return dict(dev_mode=DEV_MODE)

@app.context_processor
def inject_pandas():
    return dict(pd=pd)

# --- L·∫•y th√¥ng tin t·ª´ .env ---
GCP_CREDS_FILE_PATH = os.getenv("GCP_CREDS_FILE_PATH")
DEFAULT_SHEET_ID = os.getenv("DEFAULT_SHEET_ID")
WORKSHEET_NAME = os.getenv("WORKSHEET_NAME")
GOOGLE_API_KEY = os.getenv("GOOGLE_API_KEY")
TOTAL_HOTEL_CAPACITY = 4

# --- Kh·ªüi t·∫°o ---
if GOOGLE_API_KEY:
    genai.configure(api_key=GOOGLE_API_KEY)

# --- H√†m ch√≠nh ƒë·ªÉ t·∫£i d·ªØ li·ªáu ---
@lru_cache(maxsize=1)
def load_data():
    print("Loading booking data from source...")
    try:
        df = import_from_gsheet(DEFAULT_SHEET_ID, GCP_CREDS_FILE_PATH, WORKSHEET_NAME)
        if df.empty:
            raise ValueError("Booking sheet is empty or inaccessible.")
        active_bookings = df[df['T√¨nh tr·∫°ng'] != 'ƒê√£ h·ªßy'].copy()
        print("Successfully loaded data from Google Sheet!")
        return df, active_bookings
    except Exception as e:
        print(f"Error loading booking data: {e}. Using demo data.")
        df_demo, active_bookings_demo = create_demo_data()
        return df_demo, active_bookings_demo

# --- C√ÅC ROUTE C·ª¶A ·ª®NG D·ª§NG ---

@app.route('/')
def dashboard():
    start_date_str = request.args.get('start_date')
    end_date_str = request.args.get('end_date')

    if not start_date_str or not end_date_str:
        # === PH·∫¶N S·ª¨A L·ªñI QUAN TR·ªåNG ===
        # L·∫•y ng√†y v√† gi·ªù hi·ªán t·∫°i, sau ƒë√≥ ch·ªâ l·∫•y ph·∫ßn ng√†y
        today_full = datetime.today()
        start_date = today_full.replace(day=1)
        _, last_day = calendar.monthrange(today_full.year, today_full.month)
        end_date = today_full.replace(day=last_day)
    else:
        start_date = datetime.strptime(start_date_str, '%Y-%m-%d')
        end_date = datetime.strptime(end_date_str, '%Y-%m-%d')

    df, _ = load_data()
    
    # G·ªçi h√†m logic v·ªõi c√°c tham s·ªë s·∫Øp x·∫øp
    sort_by = request.args.get('sort_by', 'Th√°ng')
    sort_order = request.args.get('sort_order', 'desc')
    dashboard_data = prepare_dashboard_data(df, start_date, end_date, sort_by, sort_order)

    # Chu·∫©n b·ªã d·ªØ li·ªáu cho template
    monthly_revenue_list = dashboard_data.get('monthly_revenue_all_time', pd.DataFrame()).to_dict('records')
    genius_stats_list = dashboard_data.get('genius_stats', pd.DataFrame()).to_dict('records')
    monthly_guests_list = dashboard_data.get('monthly_guests_all_time', pd.DataFrame()).to_dict('records')
    weekly_guests_list = dashboard_data.get('weekly_guests_all_time', pd.DataFrame()).to_dict('records')
    monthly_collected_revenue_list = dashboard_data.get('monthly_collected_revenue', pd.DataFrame()).to_dict('records')

    # T·∫°o bi·ªÉu ƒë·ªì doanh thu h√†ng th√°ng v·ªõi thi·∫øt k·∫ø ƒë·∫πp h∆°n
    monthly_revenue_df = pd.DataFrame(monthly_revenue_list)
    monthly_revenue_chart_json = {}
    
    if not monthly_revenue_df.empty:
        print(f"DEBUG: Creating chart with {len(monthly_revenue_df)} data points")
        print(f"DEBUG: Data columns: {monthly_revenue_df.columns.tolist()}")
        print(f"DEBUG: Sample data: {monthly_revenue_df.head()}")
        
        # S·∫Øp x·∫øp l·∫°i theo th√°ng ƒë·ªÉ bi·ªÉu ƒë·ªì ƒë∆∞·ªùng ƒë√∫ng th·ª© t·ª±
        monthly_revenue_df_sorted = monthly_revenue_df.sort_values('Th√°ng')
        
        # T·∫°o bi·ªÉu ƒë·ªì combo: line + bar
        fig = px.line(monthly_revenue_df_sorted, x='Th√°ng', y='Doanh thu', 
                     title='üìä Doanh thu H√†ng th√°ng', markers=True)
        
        # Th√™m bar chart cho c√πng d·ªØ li·ªáu
        fig.add_bar(x=monthly_revenue_df_sorted['Th√°ng'], 
                   y=monthly_revenue_df_sorted['Doanh thu'],
                   name='Doanh thu',
                   opacity=0.3,
                   yaxis='y')
        
        # C·∫£i thi·ªán layout
        fig.update_layout(
            title={
                'text': 'üìä Doanh thu H√†ng th√°ng (T·∫•t c·∫£ th·ªùi gian)', 
                'x': 0.5,
                'font': {'size': 18, 'family': 'Arial, sans-serif', 'color': '#2c3e50'}
            },
            xaxis_title='Th√°ng',
            yaxis_title='Doanh thu (VND)',
            hovermode='x unified',
            plot_bgcolor='rgba(0,0,0,0)',
            paper_bgcolor='rgba(0,0,0,0)',
            font={'family': 'Arial, sans-serif', 'size': 12},
            margin=dict(l=60, r=30, t=80, b=50),
            height=400,
            showlegend=True,
            legend=dict(
                orientation="h",
                yanchor="bottom",
                y=1.02,
                xanchor="right",
                x=1
            )
        )
        
        # C·∫£i thi·ªán axes
        fig.update_xaxes(
            showgrid=True,
            gridwidth=1,
            gridcolor='rgba(128,128,128,0.2)',
            showline=True,
            linewidth=1,
            linecolor='rgba(128,128,128,0.5)'
        )
        
        fig.update_yaxes(
            showgrid=True,
            gridwidth=1,
            gridcolor='rgba(128,128,128,0.2)',
            showline=True,
            linewidth=1,
            linecolor='rgba(128,128,128,0.5)',
            tickformat=',.0f'
        )
        
        # C·∫£i thi·ªán line traces
        fig.update_traces(
            line=dict(width=3, color='#3498db'),
            marker=dict(size=8, color='#e74c3c', line=dict(width=2, color='white')),
            selector=dict(type='scatter')
        )
        
        # C·∫£i thi·ªán bar traces  
        fig.update_traces(
            marker=dict(color='#3498db', opacity=0.3),
            selector=dict(type='bar')
        )
        
        monthly_revenue_chart_json = json.loads(fig.to_json())
        print(f"DEBUG: Chart JSON created successfully")
    else:
        print("DEBUG: No monthly revenue data for chart")

    # ===== LOGIC M·ªöI: T√çNH TO√ÅN KH√ÅCH CH∆ØA THU TI·ªÄN QU√Å H·∫†N =====
    overdue_unpaid_guests = []
    overdue_total_amount = 0
    monthly_revenue_with_unpaid = []
    
    try:
        if not df.empty and 'Check-in Date' in df.columns:
            today = datetime.today().date()
            
            # ƒê·∫£m b·∫£o Check-in Date l√† datetime
            if df['Check-in Date'].dtype == 'object':
                df['Check-in Date'] = pd.to_datetime(df['Check-in Date'], errors='coerce')
            
            # Find overdue unpaid guests (checked-in but not paid)
            try:
                # Safer approach: work with a clean copy and convert dates properly
                df_work = df.copy()
                
                # Ensure datetime conversion with explicit handling
                if 'Check-in Date' in df_work.columns:
                    # Convert to datetime, handle various formats
                    df_work['Check-in Date'] = pd.to_datetime(df_work['Check-in Date'], errors='coerce', dayfirst=True)
                    
                    # Only proceed if we have valid datetime data
                    valid_dates_mask = df_work['Check-in Date'].notna()
                    if valid_dates_mask.any():
                        # Filter to only rows with valid dates first
                        df_valid = df_work[valid_dates_mask].copy()
                        
                        print(f"DEBUG: Total records with valid dates: {len(df_valid)}")
                        print(f"DEBUG: Today's date: {today}")
                        
                        # Debug: Check what collectors exist
                        collectors = df_valid['Ng∆∞·ªùi thu ti·ªÅn'].unique()
                        print(f"DEBUG: Unique collectors: {collectors}")
                        
                        # Now create overdue mask on clean data
                        past_checkin = df_valid['Check-in Date'].dt.date <= today
                        
                        # Handle null collectors better - include nan, N/A, empty string, None
                        collected_values = ['LOC LE', 'THAO LE']
                        collector_series = df_valid['Ng∆∞·ªùi thu ti·ªÅn'].fillna('').astype(str)
                        not_collected = ~collector_series.isin(collected_values)
                        
                        not_cancelled = df_valid['T√¨nh tr·∫°ng'] != 'ƒê√£ h·ªßy'
                        
                        print(f"DEBUG: Past check-in: {past_checkin.sum()} records")
                        print(f"DEBUG: Not collected: {not_collected.sum()} records") 
                        print(f"DEBUG: Not cancelled: {not_cancelled.sum()} records")
                        
                        overdue_mask = past_checkin & not_collected & not_cancelled
                        print(f"DEBUG: Combined overdue mask: {overdue_mask.sum()} records")
                        
                        overdue_df = df_valid[overdue_mask].copy()
                        
                        if not overdue_df.empty:
                            # Calculate overdue days safely - convert date to days manually
                            try:
                                checkin_dates = overdue_df['Check-in Date'].dt.date
                                days_overdue_list = []
                                for date in checkin_dates:
                                    try:
                                        days = (today - date).days
                                        days_overdue_list.append(max(0, days))  # Ensure non-negative
                                    except:
                                        days_overdue_list.append(0)  # Fallback for any date issues
                                        
                                overdue_df['days_overdue'] = days_overdue_list
                                print(f"DEBUG: Days overdue calculated: {days_overdue_list}")
                                
                            except Exception as days_error:
                                print(f"DEBUG: Error calculating days: {days_error}")
                                overdue_df['days_overdue'] = 0  # Fallback
                            
                            # Sort by overdue days descending
                            overdue_df = overdue_df.sort_values('days_overdue', ascending=False)
                            
                            # Safe sum calculation BEFORE converting to dict
                            if 'T·ªïng thanh to√°n' in overdue_df.columns:
                                overdue_total_amount = pd.to_numeric(overdue_df['T·ªïng thanh to√°n'], errors='coerce').fillna(0).sum()
                            
                            # Convert to list AFTER all calculations
                            overdue_unpaid_guests = overdue_df.to_dict('records')
                            
                            # DEBUG: Print detailed info about overdue guests
                            print(f"DEBUG: Found {len(overdue_unpaid_guests)} overdue unpaid guests, total: {overdue_total_amount:,.0f}d")
                            for i, guest in enumerate(overdue_unpaid_guests[:3]):  # Print first 3
                                print(f"DEBUG Guest {i+1}: {guest.get('T√™n ng∆∞·ªùi ƒë·∫∑t', 'N/A')} - {guest.get('days_overdue', 0)} days - {guest.get('T·ªïng thanh to√°n', 0)}d")
                                print(f"  Check-in: {guest.get('Check-in Date')}, Collector: '{guest.get('Ng∆∞·ªùi thu ti·ªÅn', 'N/A')}'")
                        else:
                            print("DEBUG: No overdue guests found after filtering")
                            
                    else:
                        print("DEBUG: No valid dates found in data")
                
            except Exception as overdue_error:
                print(f"WARNING: Error calculating overdue guests: {overdue_error}")
                import traceback
                traceback.print_exc()
                overdue_unpaid_guests = []
                overdue_total_amount = 0
            
            # T√≠nh to√°n doanh thu theo th√°ng c√≥ bao g·ªìm s·ªë kh√°ch ch∆∞a thu
            try:
                df_period = df[
                    (df['Check-in Date'] >= pd.Timestamp(start_date)) & 
                    (df['Check-in Date'] <= pd.Timestamp(end_date)) &
                    (df['Check-in Date'] <= pd.Timestamp.now()) &
                    (df['Check-in Date'].notna())
                ].copy()
                
                if not df_period.empty:
                    # T√≠nh doanh thu ƒë√£ thu (LOC LE v√† THAO LE)
                    collected_df = df_period[
                        df_period['Ng∆∞·ªùi thu ti·ªÅn'].isin(['LOC LE', 'THAO LE'])
                    ].copy()
                    
                    # T√≠nh doanh thu ch∆∞a thu (c√°c gi√° tr·ªã kh√°c ho·∫∑c r·ªóng)
                    uncollected_df = df_period[
                        ~df_period['Ng∆∞·ªùi thu ti·ªÅn'].isin(['LOC LE', 'THAO LE'])
                    ].copy()
                    
                    # Nh√≥m theo th√°ng - ƒê√£ thu
                    if not collected_df.empty:
                        collected_df['Month_Period'] = collected_df['Check-in Date'].dt.to_period('M')
                        collected_monthly = collected_df.groupby('Month_Period').agg({
                            'T·ªïng thanh to√°n': 'sum'
                        }).reset_index()
                        collected_monthly['Th√°ng'] = collected_monthly['Month_Period'].dt.strftime('%Y-%m')
                    else:
                        collected_monthly = pd.DataFrame(columns=['Th√°ng', 'T·ªïng thanh to√°n'])
                    
                    # Nh√≥m theo th√°ng - Ch∆∞a thu
                    if not uncollected_df.empty:
                        uncollected_df['Month_Period'] = uncollected_df['Check-in Date'].dt.to_period('M')
                        uncollected_monthly = uncollected_df.groupby('Month_Period').agg({
                            'T·ªïng thanh to√°n': 'sum',
                            'S·ªë ƒë·∫∑t ph√≤ng': 'count'  # ƒê·∫øm s·ªë kh√°ch ch∆∞a thu
                        }).reset_index()
                        uncollected_monthly['Th√°ng'] = uncollected_monthly['Month_Period'].dt.strftime('%Y-%m')
                        uncollected_monthly = uncollected_monthly.rename(columns={'S·ªë ƒë·∫∑t ph√≤ng': 'S·ªë kh√°ch ch∆∞a thu'})
                    else:
                        uncollected_monthly = pd.DataFrame(columns=['Th√°ng', 'T·ªïng thanh to√°n', 'S·ªë kh√°ch ch∆∞a thu'])
                    
                    # Merge d·ªØ li·ªáu
                    if not collected_monthly.empty and not uncollected_monthly.empty:
                        merged_data = pd.merge(
                            collected_monthly[['Th√°ng', 'T·ªïng thanh to√°n']].rename(columns={'T·ªïng thanh to√°n': 'ƒê√£ thu'}),
                            uncollected_monthly[['Th√°ng', 'T·ªïng thanh to√°n', 'S·ªë kh√°ch ch∆∞a thu']].rename(columns={'T·ªïng thanh to√°n': 'Ch∆∞a thu'}),
                            on='Th√°ng', how='outer'
                        ).fillna(0)
                    elif not collected_monthly.empty:
                        merged_data = collected_monthly[['Th√°ng', 'T·ªïng thanh to√°n']].rename(columns={'T·ªïng thanh to√°n': 'ƒê√£ thu'})
                        merged_data['Ch∆∞a thu'] = 0
                        merged_data['S·ªë kh√°ch ch∆∞a thu'] = 0
                    elif not uncollected_monthly.empty:
                        merged_data = uncollected_monthly[['Th√°ng', 'T·ªïng thanh to√°n', 'S·ªë kh√°ch ch∆∞a thu']].rename(columns={'T·ªïng thanh to√°n': 'Ch∆∞a thu'})
                        merged_data['ƒê√£ thu'] = 0
                    else:
                        merged_data = pd.DataFrame(columns=['Th√°ng', 'ƒê√£ thu', 'Ch∆∞a thu', 'S·ªë kh√°ch ch∆∞a thu'])
                    
                    if not merged_data.empty:
                        # S·∫Øp x·∫øp theo th√°ng
                        merged_data = merged_data.sort_values('Th√°ng')
                        monthly_revenue_with_unpaid = merged_data.to_dict('records')
                    
                    print(f"DEBUG: Monthly revenue with unpaid data created: {len(monthly_revenue_with_unpaid)} months")
                    
            except Exception as monthly_error:
                print(f"WARNING: Error calculating monthly revenue with unpaid: {monthly_error}")
                monthly_revenue_with_unpaid = []
                
    except Exception as main_error:
        print(f"ERROR: Main calculation error: {main_error}")
        import traceback
        traceback.print_exc()
        overdue_unpaid_guests = []
        overdue_total_amount = 0
        monthly_revenue_with_unpaid = []

    # T·∫°o bi·ªÉu ƒë·ªì donut chart chuy√™n nghi·ªáp cho ng∆∞·ªùi thu ti·ªÅn
    collector_revenue_data = dashboard_data.get('collector_revenue_selected', pd.DataFrame()).to_dict('records')
    
    collector_chart_data = {
        'data': [{
            'type': 'pie',
            'labels': [row['Ng∆∞·ªùi thu ti·ªÅn'] for row in collector_revenue_data],
            'values': [row['T·ªïng thanh to√°n'] for row in collector_revenue_data],
            'textinfo': 'label+percent',
            'textposition': 'auto',
            'hovertemplate': '<b>%{label}</b><br>' +
                           'Doanh thu: %{value:,.0f}ƒë<br>' +
                           'T·ª∑ l·ªá: %{percent}<br>' +
                           '<extra></extra>',
            'marker': {
                'colors': ['#3498db', '#e74c3c', '#2ecc71', '#f39c12', '#9b59b6', '#1abc9c'],
                'line': {
                    'color': '#ffffff',
                    'width': 3
                }
            },
            'hole': 0.4,
            'textfont': {
                'size': 12,
                'family': 'Arial Bold',
                'color': '#2c3e50'
            },
            'pull': [0.05 if i == 0 else 0 for i in range(len(collector_revenue_data))]  # N·ªïi b·∫≠t ph·∫ßn ƒë·∫ßu ti√™n
        }],
        'layout': {
            'title': {
                'text': 'üí∞ Doanh thu theo Ng∆∞·ªùi thu',
                'x': 0.5,
                'y': 0.95,
                'font': {
                    'size': 16,
                    'family': 'Arial Bold',
                    'color': '#2c3e50'
                }
            },
            'showlegend': True,
            'legend': {
                'orientation': 'v',
                'x': 1.05,
                'y': 0.5,
                'font': {
                    'size': 12,
                    'family': 'Arial',
                    'color': '#2c3e50'
                },
                'bgcolor': 'rgba(255,255,255,0.9)',
                'bordercolor': 'rgba(0,0,0,0.1)',
                'borderwidth': 1
            },
            'height': 300,
            'margin': {'l': 20, 'r': 120, 't': 40, 'b': 20},
            'plot_bgcolor': 'rgba(248,249,250,0.8)',
            'paper_bgcolor': 'rgba(0,0,0,0)',
            'font': {
                'family': 'Arial, sans-serif',
                'size': 12,
                'color': '#2c3e50'
            },
            'annotations': [{
                'text': f'<b>T·ªïng</b><br>{sum([row["T·ªïng thanh to√°n"] for row in collector_revenue_data]):,.0f}ƒë',
                'x': 0.5, 'y': 0.5,
                'font': {'size': 14, 'family': 'Arial Bold', 'color': '#2c3e50'},
                'showarrow': False
            }]
        }
    }

    collector_revenue_list = dashboard_data.get('collector_revenue_selected', pd.DataFrame()).to_dict('records')

    # DEBUG: Print what we're sending to template
    print(f"DEBUG: Sending to template - overdue_unpaid_guests count: {len(overdue_unpaid_guests)}")
    print(f"DEBUG: Sending to template - overdue_total_amount: {overdue_total_amount}")
    if overdue_unpaid_guests:
        print(f"DEBUG: First overdue guest: {overdue_unpaid_guests[0].get('T√™n ng∆∞·ªùi ƒë·∫∑t', 'N/A')}")

    return render_template(
        'dashboard.html',
        total_revenue=dashboard_data.get('total_revenue_selected', 0),
        total_guests=dashboard_data.get('total_guests_selected', 0),
        monthly_revenue_list=monthly_revenue_list,
        genius_stats_list=genius_stats_list,
        monthly_guests_list=monthly_guests_list,
        weekly_guests_list=weekly_guests_list,
        monthly_collected_revenue_list=monthly_collected_revenue_list,
        monthly_revenue_chart_json=monthly_revenue_chart_json,
        monthly_revenue_with_unpaid=monthly_revenue_with_unpaid,  # D·ªØ li·ªáu m·ªõi
        overdue_unpaid_guests=overdue_unpaid_guests,  # Kh√°ch qu√° h·∫°n
        overdue_total_amount=overdue_total_amount,  # T·ªïng ti·ªÅn qu√° h·∫°n
        collector_chart_json=collector_chart_data,
        collector_revenue_list=collector_revenue_list,
        start_date=start_date.strftime('%Y-%m-%d'),
        end_date=end_date.strftime('%Y-%m-%d'),
        current_sort_by=sort_by,
        current_sort_order=sort_order
    )

@app.route('/bookings')
def view_bookings():
    df, _ = load_data()
    
    # L·∫•y tham s·ªë t·ª´ URL
    search_term = request.args.get('search_term', '').strip().lower()
    sort_by = request.args.get('sort_by', 'Check-in Date') # M·∫∑c ƒë·ªãnh s·∫Øp x·∫øp theo Check-in Date
    order = request.args.get('order', 'asc') # M·∫∑c ƒë·ªãnh tƒÉng d·∫ßn (ascending)
    
    # Th√™m filter theo th√°ng
    filter_month = request.args.get('filter_month', '')
    filter_year = request.args.get('filter_year', '')
    start_date = request.args.get('start_date', '')
    end_date = request.args.get('end_date', '')

    # L·ªçc theo t·ª´ kh√≥a t√¨m ki·∫øm
    if search_term:
        df = df[df.apply(lambda row: search_term in str(row).lower(), axis=1)]

    # L·ªçc theo th√°ng/nƒÉm
    if filter_month and filter_year:
        try:
            year = int(filter_year)
            month = int(filter_month)
            df = df[
                (df['Check-in Date'].dt.year == year) & 
                (df['Check-in Date'].dt.month == month)
            ]
        except (ValueError, AttributeError):
            pass
    
    # L·ªçc theo kho·∫£ng ng√†y c·ª• th·ªÉ
    elif start_date and end_date:
        try:
            start_dt = pd.to_datetime(start_date)
            end_dt = pd.to_datetime(end_date)
            df = df[
                (df['Check-in Date'] >= start_dt) & 
                (df['Check-in Date'] <= end_dt)
            ]
        except (ValueError, AttributeError):
            pass

    # S·∫Øp x·∫øp d·ªØ li·ªáu
    if sort_by in df.columns:
        ascending = order == 'asc'
        df = df.sort_values(by=sort_by, ascending=ascending)
    
    bookings_list = df.to_dict(orient='records')
    
    # T·∫°o danh s√°ch th√°ng/nƒÉm c√≥ s·∫µn ƒë·ªÉ dropdown
    all_df, _ = load_data()
    available_months = []
    if not all_df.empty and 'Check-in Date' in all_df.columns:
        unique_dates = all_df['Check-in Date'].dropna().dt.to_period('M').unique()
        available_months = [(str(period), period.year, period.month) for period in sorted(unique_dates, reverse=True)]
    
    return render_template('bookings.html', 
                         bookings=bookings_list, 
                         search_term=search_term, 
                         booking_count=len(bookings_list),
                         current_sort_by=sort_by,
                         current_order=order,
                         filter_month=filter_month,
                         filter_year=filter_year,
                         start_date=start_date,
                         end_date=end_date,
                         available_months=available_months)

@app.route('/calendar/')
@app.route('/calendar/<int:year>/<int:month>')
def calendar_view(year=None, month=None):
    today = datetime.today()
    if year is None or month is None:
        return redirect(url_for('calendar_view', year=today.year, month=today.month))
    
    current_month_start = datetime(year, month, 1)
    prev_month_date = (current_month_start.replace(day=1) - timedelta(days=1)).replace(day=1)
    next_month_date = (current_month_start.replace(day=1) + timedelta(days=32)).replace(day=1)

    df, _ = load_data()
    month_activities = {}
    month_matrix = calendar.monthcalendar(year, month)
    
    calendar_data = []
    for week in month_matrix:
        week_data = []
        for day in week:
            if day != 0:
                current_date = datetime(year, month, day).date()
                date_str = current_date.strftime('%Y-%m-%d')
                day_info = get_overall_calendar_day_info(current_date, df, TOTAL_HOTEL_CAPACITY)
                week_data.append((current_date, date_str, day_info))
            else:
                week_data.append((None, None, None))
        calendar_data.append(week_data)

    return render_template(
        'calendar.html',
        calendar_data=calendar_data,
        current_month=current_month_start,
        prev_month=prev_month_date,
        next_month=next_month_date,
        today=today.date()
    )

@app.route('/calendar/details/<string:date_str>')
def calendar_details(date_str):
    try:
        parsed_date = datetime.strptime(date_str, '%Y-%m-%d').date()
    except ValueError:
        flash("ƒê·ªãnh d·∫°ng ng√†y kh√¥ng h·ª£p l·ªá.", "danger")
        return redirect(url_for('calendar_view'))
    df, _ = load_data()
    activities = get_daily_activity(parsed_date, df)
    return render_template('calendar_details.html',
                           date=parsed_date.strftime('%d/%m/%Y'),
                           check_in=activities.get('check_in', []),
                           check_out=activities.get('check_out', []),
                           staying_over=activities.get('staying_over', []),
                           current_date=parsed_date)
    
@app.route('/bookings/add_from_image', methods=['GET'])
def add_from_image_page():
    return render_template('add_from_image.html')

@app.route('/api/process_pasted_image', methods=['POST'])
def process_pasted_image():
    data = request.get_json()
    if not data or 'image_b64' not in data:
        return jsonify({"error": "Y√™u c·∫ßu kh√¥ng ch·ª©a d·ªØ li·ªáu ·∫£nh."}), 400
    try:
        image_header, image_b64_data = data['image_b64'].split(',', 1)
        image_bytes = base64.b64decode(image_b64_data)
        extracted_data = extract_booking_info_from_image_content(image_bytes)
        return jsonify(extracted_data)
    except Exception as e:
        return jsonify({"error": f"L·ªói x·ª≠ l√Ω ph√≠a server: {str(e)}"}), 500

@app.route('/bookings/sync')
def sync_bookings():
    """
    ƒê√¢y l√† n∆°i ƒê√öNG v√† DUY NH·∫§T ƒë·ªÉ g·ªçi cache_clear.
    """
    try:
        load_data.cache_clear()
        flash('Data has been synced from Google Sheets.', 'info')
        print("Cache cleared successfully via Sync button.")
    except Exception as e:
        flash(f'Error clearing cache: {e}', 'danger')

    return redirect(url_for('view_bookings'))

@app.route('/bookings/export')
def export_bookings():
    try:
        df, _ = load_data()
        if not df.empty:
            worksheet_name = export_data_to_new_sheet(df, GCP_CREDS_FILE_PATH, DEFAULT_SHEET_ID)
            flash(f'ƒê√£ export d·ªØ li·ªáu th√†nh c√¥ng ra sheet m·ªõi: "{worksheet_name}"', 'success')
        else:
            flash('Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ export.', 'warning')
    except Exception as e:
        flash(f'L·ªói khi export d·ªØ li·ªáu: {e}', 'danger')
    return redirect(url_for('view_bookings'))
    
@app.route('/bookings/save_extracted', methods=['POST'])
def save_extracted_bookings():
    try:
        extracted_json_str = request.form.get('extracted_json')
        if not extracted_json_str:
            flash('Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ l∆∞u.', 'warning')
            return redirect(url_for('add_from_image_page'))

        bookings_to_save = json.loads(extracted_json_str)
        
        formatted_bookings = []
        for booking in bookings_to_save:
            if 'error' in booking: continue
            formatted_bookings.append({
                'T√™n ng∆∞·ªùi ƒë·∫∑t': booking.get('guest_name'),
                'S·ªë ƒë·∫∑t ph√≤ng': booking.get('booking_id'),
                'Check-in Date': booking.get('check_in_date'),
                'Check-out Date': booking.get('check_out_date'),
                'T√™n ch·ªó ngh·ªâ': booking.get('room_type'),
                'T·ªïng thanh to√°n': booking.get('total_payment'),
                'T√¨nh tr·∫°ng': 'OK'
            })

        if formatted_bookings:
            append_multiple_bookings_to_sheet(
                bookings=formatted_bookings,
                gcp_creds_file_path=GCP_CREDS_FILE_PATH,
                sheet_id=DEFAULT_SHEET_ID,
                worksheet_name=WORKSHEET_NAME
            )
            # === S·ª¨A L·ªñI QUAN TR·ªåNG: X√≥a cache sau khi th√™m ===
            load_data.cache_clear()
            flash(f'ƒê√£ l∆∞u th√†nh c√¥ng {len(formatted_bookings)} ƒë·∫∑t ph√≤ng m·ªõi!', 'success')
        else:
            flash('Kh√¥ng c√≥ ƒë·∫∑t ph√≤ng h·ª£p l·ªá n√†o ƒë·ªÉ l∆∞u.', 'info')

    except Exception as e:
        flash(f'L·ªói khi l∆∞u c√°c ƒë·∫∑t ph√≤ng ƒë√£ tr√≠ch xu·∫•t: {e}', 'danger')
        
    return redirect(url_for('view_bookings'))

@app.route('/booking/<booking_id>/edit', methods=['GET', 'POST'])
def edit_booking(booking_id):
    df, _ = load_data()
    booking = df[df['S·ªë ƒë·∫∑t ph√≤ng'] == booking_id].to_dict('records')[0] if not df.empty else {}
    
    if request.method == 'POST':
        new_data = {
            'T√™n ng∆∞·ªùi ƒë·∫∑t': request.form.get('T√™n ng∆∞·ªùi ƒë·∫∑t'),
            'T√™n ch·ªó ngh·ªâ': request.form.get('T√™n ch·ªó ngh·ªâ'),
            'Check-in Date': request.form.get('Check-in Date'),
            'Check-out Date': request.form.get('Check-out Date'),
            'T·ªïng thanh to√°n': request.form.get('T·ªïng thanh to√°n'),
            'T√¨nh tr·∫°ng': request.form.get('T√¨nh tr·∫°ng'),
            'Ng∆∞·ªùi thu ti·ªÅn': request.form.get('Ng∆∞·ªùi thu ti·ªÅn'),
        }
        
        success = update_row_in_gsheet(
            sheet_id=DEFAULT_SHEET_ID,
            gcp_creds_file_path=GCP_CREDS_FILE_PATH,
            worksheet_name=WORKSHEET_NAME,
            booking_id=booking_id,
            new_data=new_data
        )
        
        if success:
            # X√≥a cache ƒë·ªÉ t·∫£i l·∫°i d·ªØ li·ªáu m·ªõi
            load_data.cache_clear()
            flash('ƒê√£ c·∫≠p nh·∫≠t ƒë·∫∑t ph√≤ng th√†nh c√¥ng!', 'success')
        else:
            flash('C√≥ l·ªói x·∫£y ra khi c·∫≠p nh·∫≠t ƒë·∫∑t ph√≤ng tr√™n Google Sheet.', 'danger')
            
        return redirect(url_for('view_bookings'))
        
    return render_template('edit_booking.html', booking=booking)

@app.route('/booking/<booking_id>/delete', methods=['POST'])
def delete_booking(booking_id):
    success = delete_row_in_gsheet(
        sheet_id=DEFAULT_SHEET_ID,
        gcp_creds_file_path=GCP_CREDS_FILE_PATH,
        worksheet_name=WORKSHEET_NAME,
        booking_id=booking_id
    )
    
    if success:
        flash(f'ƒê√£ x√≥a th√†nh c√¥ng ƒë·∫∑t ph√≤ng c√≥ ID: {booking_id}', 'success')
        load_data.cache_clear() # X√≥a cache sau khi s·ª≠a ƒë·ªïi
    else:
        flash('L·ªói khi x√≥a ƒë·∫∑t ph√≤ng.', 'danger')
    return redirect(url_for('view_bookings'))

@app.route('/bookings/delete_multiple', methods=['POST'])
def delete_multiple_bookings():
    data = request.get_json()
    ids_to_delete = data.get('ids')

    if not ids_to_delete:
        return jsonify({'success': False, 'message': 'Kh√¥ng c√≥ ID n√†o ƒë∆∞·ª£c cung c·∫•p.'})

    try:
        success = delete_multiple_rows_in_gsheet(
            sheet_id=DEFAULT_SHEET_ID,
            gcp_creds_file_path=GCP_CREDS_FILE_PATH,
            worksheet_name=WORKSHEET_NAME,
            booking_ids=ids_to_delete
        )
        if success:
            load_data.cache_clear() # X√≥a cache sau khi s·ª≠a ƒë·ªïi
            return jsonify({'success': True})
        else:
            return jsonify({'success': False, 'message': 'L·ªói khi x√≥a d·ªØ li·ªáu tr√™n Google Sheets.'})
    except Exception as e:
        return jsonify({'success': False, 'message': str(e)})

@app.route('/api/collect_payment', methods=['POST'])
def collect_payment():
    """API endpoint ƒë·ªÉ thu ti·ªÅn t·ª´ kh√°ch h√†ng"""
    try:
        data = request.get_json()
        if not data:
            return jsonify({'success': False, 'message': 'Kh√¥ng c√≥ d·ªØ li·ªáu'}), 400
        
        booking_id = data.get('booking_id')
        collected_amount = data.get('collected_amount')
        collector_name = data.get('collector_name')
        payment_note = data.get('payment_note', '')
        
        # Validate input
        if not booking_id:
            return jsonify({'success': False, 'message': 'Thi·∫øu m√£ ƒë·∫∑t ph√≤ng'}), 400
            
        if not collector_name:
            return jsonify({'success': False, 'message': 'Thi·∫øu t√™n ng∆∞·ªùi thu ti·ªÅn'}), 400
            
        if not collected_amount or collected_amount <= 0:
            return jsonify({'success': False, 'message': 'S·ªë ti·ªÅn thu kh√¥ng h·ª£p l·ªá'}), 400
        
        # C·∫≠p nh·∫≠t th√¥ng tin trong Google Sheets
        new_data = {
            'Ng∆∞·ªùi thu ti·ªÅn': collector_name,
        }
        
        # Th√™m ghi ch√∫ n·∫øu c√≥
        if payment_note:
            new_data['Ghi ch√∫ thu ti·ªÅn'] = f"Thu {collected_amount:,.0f}ƒë - {payment_note}"
        
        success = update_row_in_gsheet(
            sheet_id=DEFAULT_SHEET_ID,
            gcp_creds_file_path=GCP_CREDS_FILE_PATH,
            worksheet_name=WORKSHEET_NAME,
            booking_id=booking_id,
            new_data=new_data
        )
        
        if success:
            # X√≥a cache ƒë·ªÉ c·∫≠p nh·∫≠t d·ªØ li·ªáu
            load_data.cache_clear()
            return jsonify({
                'success': True, 
                'message': f'ƒê√£ thu th√†nh c√¥ng {collected_amount:,.0f}ƒë t·ª´ {booking_id}'
            })
        else:
            return jsonify({
                'success': False, 
                'message': 'Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t th√¥ng tin tr√™n Google Sheets'
            })
            
    except Exception as e:
        print(f"Collect payment error: {e}")
        import traceback
        traceback.print_exc()
        return jsonify({
            'success': False, 
            'message': f'L·ªói server: {str(e)}'
        }), 500

@app.route('/voice_translator')
def voice_translator():
    """Trang Voice Translator - D·ªãch gi·ªçng n√≥i"""
    return render_template('voice_translator.html')

@app.route('/api/translate', methods=['POST'])
def translate_text():
    """API endpoint ƒë·ªÉ d·ªãch vƒÉn b·∫£n s·ª≠ d·ª•ng Google Translate"""
    try:
        data = request.get_json()
        if not data or 'text' not in data:
            return jsonify({"error": "Kh√¥ng c√≥ vƒÉn b·∫£n ƒë·ªÉ d·ªãch"}), 400
        
        text = data.get('text', '').strip()
        source_lang = data.get('source_lang', 'vi')  # Default Vietnamese
        target_lang = data.get('target_lang', 'en')  # Default English
        
        if not text:
            return jsonify({"error": "VƒÉn b·∫£n tr·ªëng"}), 400
        
        # G·ªçi function d·ªãch thu·∫≠t
        translated_text = translate_with_google_api(text, source_lang, target_lang)
        
        return jsonify({
            "original_text": text,
            "translated_text": translated_text,
            "source_language": source_lang,
            "target_language": target_lang,
            "success": True
        })
        
    except Exception as e:
        print(f"Translation API error: {e}")
        import traceback
        traceback.print_exc()
        return jsonify({"error": f"L·ªói d·ªãch thu·∫≠t: {str(e)}"}), 500

@app.route('/ai_chat_assistant')
def ai_chat_assistant():
    """Trang AI Chat Assistant - L·ªÖ t√¢n th√¥ng minh"""
    return render_template('ai_chat_assistant.html')

@app.route('/templates')
def get_templates_page():
    """Tr·∫£ v·ªÅ trang HTML cho qu·∫£n l√Ω templates"""
    return render_template('templates.html')

@app.route('/api/templates/debug')
def debug_templates():
    """Debug endpoint to check templates data"""
    templates_path = BASE_DIR / 'message_templates.json'
    
    debug_info = {
        'file_exists': templates_path.exists(),
        'file_path': str(templates_path),
        'file_size': templates_path.stat().st_size if templates_path.exists() else 0,
        'templates_count': 0,
        'sample_template': None,
        'error': None
    }
    
    try:
        if templates_path.exists():
            with open(templates_path, 'r', encoding='utf-8') as f:
                content = f.read()
                debug_info['file_content_length'] = len(content)
                
                templates = json.loads(content)
                debug_info['templates_count'] = len(templates)
                debug_info['templates_type'] = type(templates).__name__
                
                if templates:
                    debug_info['sample_template'] = templates[0]
                    debug_info['all_categories'] = list(set(t.get('Category', 'NO_CATEGORY') for t in templates))
                    
    except Exception as e:
        debug_info['error'] = str(e)
        
    return jsonify(debug_info)

@app.route('/api/templates')
def get_templates_api():
    """API endpoint tr·∫£ v·ªÅ JSON data c·ªßa templates"""
    templates_path = BASE_DIR / 'message_templates.json'
    try:
        print(f"DEBUG: Looking for templates file at: {templates_path}")
        
        if not templates_path.exists():
            print("DEBUG: Templates file does not exist")
            return jsonify([])
            
        with open(templates_path, 'r', encoding='utf-8') as f:
            templates = json.load(f)
            
        print(f"DEBUG: Successfully loaded {len(templates)} templates from file")
        
        # Validate templates data
        if not isinstance(templates, list):
            print("DEBUG: Templates data is not a list")
            return jsonify([])
            
        # Ensure each template has required fields
        valid_templates = []
        for i, template in enumerate(templates):
            if isinstance(template, dict) and 'Category' in template:
                valid_templates.append(template)
                print(f"DEBUG: Template {i}: Category='{template.get('Category')}', Label='{template.get('Label')}'")
            else:
                print(f"DEBUG: Skipping invalid template at index {i}: {template}")
        
        print(f"DEBUG: Returning {len(valid_templates)} valid templates")
        return jsonify(valid_templates)
        
    except (FileNotFoundError, json.JSONDecodeError) as e:
        print(f"DEBUG: Error loading templates: {e}")
        return jsonify([])
    except Exception as e:
        print(f"DEBUG: Unexpected error: {e}")
        import traceback
        traceback.print_exc()
        return jsonify([])

@app.route('/api/ai_chat_analyze', methods=['POST'])
def ai_chat_analyze():
    """API endpoint ƒë·ªÉ ph√¢n t√≠ch ·∫£nh chat v√† t·∫°o ph·∫£n h·ªìi AI"""
    try:
        data = request.get_json()
        if not data or 'image_b64' not in data:
            return jsonify({"error": "Y√™u c·∫ßu kh√¥ng ch·ª©a d·ªØ li·ªáu ·∫£nh."}), 400
        
        # X·ª≠ l√Ω ·∫£nh base64
        image_header, image_b64_data = data['image_b64'].split(',', 1)
        image_bytes = base64.b64decode(image_b64_data)
        
        # L·∫•y AI configuration t·ª´ request (n·∫øu c√≥)
        ai_config = data.get('ai_config', {})
        selected_template = ai_config.get('selectedTemplate')
        response_mode = ai_config.get('responseMode', 'auto')
        
        # Read latest templates directly from Google Sheets
        print("Loading latest templates from Google Sheets...")
        try:
            templates = import_message_templates_from_gsheet(
                sheet_id=DEFAULT_SHEET_ID,
                gcp_creds_file_path=GCP_CREDS_FILE_PATH
            )
            print(f"Loaded {len(templates)} templates from Google Sheets")
        except Exception as e:
            print(f"Error loading from Google Sheets, using JSON backup: {e}")
            # Fallback: read from JSON file if Google Sheets fails
            templates_path = BASE_DIR / 'message_templates.json'
            try:
                with open(templates_path, 'r', encoding='utf-8') as f:
                    templates = json.load(f)
                print(f"Loaded {len(templates)} templates from JSON backup")
            except (FileNotFoundError, json.JSONDecodeError):
                templates = []
                print("No templates available")
        
        # Ph√¢n t√≠ch ·∫£nh v·ªõi AI s·ª≠ d·ª•ng AI configuration
        result = analyze_chat_image_with_ai(image_bytes, templates, selected_template, response_mode)
        
        return jsonify(result)
        
    except Exception as e:
        print(f"AI Chat Analysis error: {e}")
        import traceback
        traceback.print_exc()
        return jsonify({"error": f"L·ªói x·ª≠ l√Ω ph√≠a server: {str(e)}"}), 500

@app.route('/api/templates/add', methods=['POST'])
def add_template_api():
    """API endpoint ƒë·ªÉ th√™m m·∫´u tin nh·∫Øn m·ªõi v√† t·ª± ƒë·ªông sync v·ªõi Google Sheets"""
    try:
        # L·∫•y d·ªØ li·ªáu m·∫´u m·ªõi t·ª´ request
        new_template = request.get_json()
        
        if not new_template:
            return jsonify({'success': False, 'message': 'Kh√¥ng c√≥ d·ªØ li·ªáu m·∫´u tin nh·∫Øn'}), 400
        
        # Validate required fields
        required_fields = ['Category', 'Label', 'Message']
        for field in required_fields:
            if field not in new_template or not new_template[field].strip():
                return jsonify({'success': False, 'message': f'Thi·∫øu tr∆∞·ªùng b·∫Øt bu·ªôc: {field}'}), 400
        
        # Read current templates from Google Sheets (source of truth)
        print("Reading templates from Google Sheets...")
        try:
            templates = import_message_templates_from_gsheet(
                sheet_id=DEFAULT_SHEET_ID,
                gcp_creds_file_path=GCP_CREDS_FILE_PATH
            )
            print(f"Read {len(templates)} templates from Google Sheets")
        except Exception as e:
            print(f"Error reading Google Sheets, using JSON file: {e}")
            # Fallback: ƒë·ªçc t·ª´ file JSON
            templates_path = BASE_DIR / 'message_templates.json'
            try:
                with open(templates_path, 'r', encoding='utf-8') as f:
                    templates = json.load(f)
            except (FileNotFoundError, json.JSONDecodeError):
                templates = []
        
        # Ki·ªÉm tra tr√πng l·∫∑p (Category + Label)
        for existing in templates:
            if (existing.get('Category', '').upper() == new_template['Category'].upper() and 
                existing.get('Label', '').upper() == new_template['Label'].upper()):
                return jsonify({
                    'success': False, 
                    'message': f'‚ùå ƒê√£ t·ªìn t·∫°i m·∫´u v·ªõi Category "{new_template["Category"]}" v√† Label "{new_template["Label"]}"'
                }), 400
        
        # Th√™m m·∫´u m·ªõi v√†o danh s√°ch
        new_template_formatted = {
            'Category': new_template['Category'].strip(),
            'Label': new_template['Label'].strip(),
            'Message': new_template['Message'].strip()
        }
        templates.append(new_template_formatted)
        
        # Sync with Google Sheets FIRST (source of truth)
        try:
            export_message_templates_to_gsheet(templates, DEFAULT_SHEET_ID, GCP_CREDS_FILE_PATH)
            sheets_sync = " - Google Sheets OK"
            print("Google Sheets updated successfully")
        except Exception as export_error:
            print(f"Export Google Sheets error: {export_error}")
            sheets_sync = " - Google Sheets ERROR"
        
        # Update JSON backup file
        try:
            templates_path = BASE_DIR / 'message_templates.json'
            with open(templates_path, 'w', encoding='utf-8') as f:
                json.dump(templates, f, ensure_ascii=False, indent=4)
            json_sync = " - JSON backup OK"
            print("JSON backup file updated")
        except Exception as json_error:
            print(f"JSON backup error: {json_error}")
            json_sync = " - JSON backup ERROR"
        
        return jsonify({
            'success': True, 
            'message': f'Template added successfully! Sync:{sheets_sync}{json_sync}',
            'template_count': len(templates),
            'new_template': new_template_formatted
        })
        
    except Exception as e:
        print(f"Add template error: {e}")
        import traceback
        traceback.print_exc()
        return jsonify({'success': False, 'message': f'‚ùå L·ªói server: {str(e)}'}), 500

@app.route('/api/save_templates', methods=['POST'])
def save_templates_api():
    templates_path = BASE_DIR / 'message_templates.json'
    templates = request.get_json()
    with open(templates_path, 'w', encoding='utf-8') as f:
        json.dump(templates, f, ensure_ascii=False, indent=4)
    return jsonify({'success': True, 'message': 'ƒê√£ l∆∞u c√°c m·∫´u tin nh·∫Øn.'})

@app.route('/templates/import', methods=['GET'])
def import_templates():
    try:
        # Import t·ª´ Google Sheets
        templates = import_message_templates_from_gsheet(
            sheet_id=DEFAULT_SHEET_ID,
            gcp_creds_file_path=GCP_CREDS_FILE_PATH
        )
        
        # L∆∞u v√†o file JSON l√†m backup
        templates_path = BASE_DIR / 'message_templates.json'
        with open(templates_path, 'w', encoding='utf-8') as f:
            json.dump(templates, f, ensure_ascii=False, indent=4)
            
        flash(f'‚úÖ ƒê√£ import th√†nh c√¥ng {len(templates)} m·∫´u tin nh·∫Øn t·ª´ Google Sheets v√† c·∫≠p nh·∫≠t backup file.', 'success')
        return redirect(url_for('get_templates_page'))
    except Exception as e:
        flash(f'‚ùå L·ªói khi import: {str(e)}', 'danger')
        return redirect(url_for('get_templates_page'))

@app.route('/templates/export')
def export_templates_route():
    try:
        templates_path = BASE_DIR / 'message_templates.json'
        try:
            with open(templates_path, 'r', encoding='utf-8') as f:
                templates = json.load(f)
        except (FileNotFoundError, json.JSONDecodeError):
            templates = []
        if not templates:
            flash('Kh√¥ng c√≥ m·∫´u tin nh·∫Øn ƒë·ªÉ export.', 'warning')
            return redirect(url_for('get_templates_page'))
        export_message_templates_to_gsheet(templates, DEFAULT_SHEET_ID, GCP_CREDS_FILE_PATH)
        flash('ƒê√£ export th√†nh c√¥ng t·∫•t c·∫£ c√°c m·∫´u tin nh·∫Øn!', 'success')
    except Exception as e:
        flash(f'L·ªói khi export: {e}', 'danger')
    return redirect(url_for('get_templates_page'))

# --- H√†m AI Chat Analysis ---
def analyze_chat_image_with_ai(image_bytes, templates, selected_template=None, response_mode='auto'):
    """
    Ph√¢n t√≠ch ·∫£nh ƒëo·∫°n chat v√† t·∫°o ph·∫£n h·ªìi AI v·ªõi vai tr√≤ l·ªÖ t√¢n kh√°ch s·∫°n
    
    Args:
        image_bytes: D·ªØ li·ªáu ·∫£nh
        templates: Danh s√°ch t·∫•t c·∫£ templates
        selected_template: Template ƒë∆∞·ª£c ch·ªçn c·ª• th·ªÉ (n·∫øu c√≥)
        response_mode: 'auto', 'yes', ho·∫∑c 'no'
    """
    try:
        if not GOOGLE_API_KEY:
            return {"error": "Google API key ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh"}
        
        # Chu·∫©n b·ªã context t·ª´ templates
        if selected_template:
            # N·∫øu c√≥ template ƒë∆∞·ª£c ch·ªçn c·ª• th·ªÉ, ∆∞u ti√™n n√≥
            templates_context = f"SELECTED TEMPLATE (USE THIS PRIMARILY):\n- {selected_template.get('Category', '')} - {selected_template.get('Label', '')}: {selected_template.get('Message', '')}\n\n"
            templates_context += "OTHER AVAILABLE TEMPLATES:\n" + "\n".join([
                f"- {t.get('Category', '')} - {t.get('Label', '')}: {t.get('Message', '')}"
                for t in templates if isinstance(t, dict) and t != selected_template
            ])
        else:
            # S·ª≠ d·ª•ng t·∫•t c·∫£ templates nh∆∞ tr∆∞·ªõc
            templates_context = "\n".join([
                f"- {t.get('Category', '')} - {t.get('Label', '')}: {t.get('Message', '')}"
                for t in templates if isinstance(t, dict)
            ])
        
        # T·∫°o h∆∞·ªõng d·∫´n cho response mode v·ªõi emphasis m·∫°nh h∆°n
        if response_mode == 'yes':
            response_mode_instruction = """
‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è CRITICAL RESPONSE MODE: POSITIVE/YES MODE ‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è
- YOU MUST respond in a POSITIVE, HELPFUL, and ACCOMMODATING manner
- ALWAYS say YES whenever possible and offer solutions
- Be ENTHUSIASTIC and SUPPORTIVE in your tone
- Example: "Absolutely! We'd be happy to help with that..."
- DO NOT decline requests unless absolutely impossible
- FOCUS on what you CAN do, not what you cannot do
"""
        elif response_mode == 'no':
            response_mode_instruction = """
‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è CRITICAL RESPONSE MODE: NEGATIVE/NO MODE ‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è
- YOU MUST politely DECLINE or explain why something ISN'T AVAILABLE
- Say NO to requests, but be APOLOGETIC and PROFESSIONAL
- Be REGRETFUL but maintain professional standards
- Example: "I'm very sorry, but unfortunately we don't have that available right now. However, we can offer..."
- ALWAYS explain why something cannot be done
- FOCUS on limitations and constraints, then offer alternatives
- Even if you would normally say yes, you MUST say no in this mode
"""
        else:
            response_mode_instruction = """
RESPONSE MODE: AUTO MODE
- Respond naturally based on the guest's request and available services
- Be honest about what's available or not available
- Use your best judgment for the most helpful response
"""
        
        # T·∫°o prompt cho AI v·ªõi response mode emphasis
        prompt = f"""
You are a friendly, casual hotel receptionist at 118 Hang Bac Hostel in Hanoi's Old Quarter. Your job is to analyze the chat conversation in the image and provide a NATURAL, FRIENDLY response to the LAST message from the guest.

HOTEL INFO:
- Name: 118 Hang Bac Hostel
- Location: 118 Hang Bac Street, Hoan Kiem District, Hanoi (Old Quarter)
- Type: Budget hostel/guesthouse in Hanoi's historic center

{response_mode_instruction}

‚ö†Ô∏è IMPORTANT: The response mode above is MANDATORY and must be followed strictly. If the mode is YES, be positive even if normally you'd say no. If the mode is NO, decline even if normally you'd say yes.

AVAILABLE MESSAGE TEMPLATES:
{templates_context}

TEMPLATE USAGE PRIORITY (VERY IMPORTANT):
1. FIRST: Analyze the guest's last message and identify the topic/need
2. {"USE SELECTED TEMPLATE: The user has specifically chosen a template to use as the primary response base" if selected_template else "SEARCH: Look through ALL available templates to find any that relate to the topic"}
3. IF MATCH FOUND: Use the relevant template as your BASE response, then adapt it to sound natural and conversational
4. IF NO MATCH: Create a helpful response based on hotel receptionist experience
5. ALWAYS: Apply the RESPONSE MODE instructions to modify your tone appropriately
6. ALWAYS: List any templates you used in the "matched_templates" section

RESPONSE STYLE:
- Use natural, casual English (avoid overly formal language)
- Be friendly and conversational 
- Keep it simple and easy to understand
- Show genuine care and helpfulness
- When using templates, make them sound natural and personal
- MOST IMPORTANT: FOLLOW THE RESPONSE MODE INSTRUCTIONS ABOVE STRICTLY

TOPIC MATCHING EXAMPLES:
- Guest asks about check-in ‚Üí Use CHECK IN or EARLY CHECK IN templates
- Guest asks about arrival/directions ‚Üí Use ARRIVAL template  
- Guest asks about parking ‚Üí Use PARK template
- Guest asks about laundry ‚Üí Use LAUNDRY template
- Guest asks about taxi/transport ‚Üí Use TAXI templates
- Guest says thanks for cleaning ‚Üí Use DON PHONG template
- Guest asks about room availability ‚Üí Use HET PHONG if no rooms
- Guest asks about payment options ‚Üí Use NOT BOOKING template

CRITICAL: Your response should be what YOU (the receptionist) would say NEXT to continue the conversation, based on available templates when possible, BUT MODIFIED ACCORDING TO THE RESPONSE MODE.

Return your analysis in this JSON format:
{{
    "analysis_info": "Brief description of what the guest needs and which topic it relates to",
    "matched_templates": [
        {{"category": "Template category if used", "label": "Template label if used", "message": "Original template content if used"}}
    ],
    "ai_response": "Your friendly, natural response based on templates when available, or original helpful response, STRICTLY following the specified response mode",
    "used_config": {{
        "selected_template": {"true" if selected_template else "false"},
        "response_mode": "{response_mode}"
    }}
}}
"""
        
        # G·ªçi Gemini API
        model = genai.GenerativeModel('gemini-2.0-flash-exp')
        
        # Chuy·ªÉn ƒë·ªïi image bytes th√†nh format ph√π h·ª£p
        image_data = {
            'mime_type': 'image/jpeg',
            'data': image_bytes
        }
        
        response = model.generate_content([prompt, image_data])
        ai_text = response.text.strip()
        
        # Parse JSON response
        try:
            # T√¨m v√† extract JSON t·ª´ response
            json_start = ai_text.find('{')
            json_end = ai_text.rfind('}') + 1
            
            if json_start >= 0 and json_end > json_start:
                json_str = ai_text[json_start:json_end]
                result = json.loads(json_str)
                
                # Validate v√† clean result
                if not isinstance(result, dict):
                    raise ValueError("Invalid JSON structure")
                
                # Ensure required fields
                result.setdefault('analysis_info', 'ƒê√£ ph√¢n t√≠ch n·ªôi dung chat')
                result.setdefault('matched_templates', [])
                result.setdefault('ai_response', ai_text)
                result.setdefault('used_config', {
                    'selected_template': bool(selected_template),
                    'response_mode': response_mode
                })
                
                return result
            else:
                # Fallback n·∫øu kh√¥ng parse ƒë∆∞·ª£c JSON
                return {
                    "analysis_info": "ƒê√£ ph√¢n t√≠ch n·ªôi dung chat t·ª´ ·∫£nh",
                    "matched_templates": [],
                    "ai_response": ai_text,
                    "used_config": {
                        'selected_template': bool(selected_template),
                        'response_mode': response_mode
                    }
                }
                
        except json.JSONDecodeError:
            # Fallback n·∫øu response kh√¥ng ph·∫£i JSON
            return {
                "analysis_info": "ƒê√£ ph√¢n t√≠ch n·ªôi dung chat t·ª´ ·∫£nh",
                "matched_templates": [],
                "ai_response": ai_text,
                "used_config": {
                    'selected_template': bool(selected_template),
                    'response_mode': response_mode
                }
            }
        
    except Exception as e:
        print(f"AI analysis error: {e}")
        return {
            "error": f"L·ªói khi ph√¢n t√≠ch v·ªõi AI: {str(e)}",
            "analysis_info": "",
            "matched_templates": [],
            "ai_response": "",
            "used_config": {
                'selected_template': bool(selected_template) if selected_template else False,
                'response_mode': response_mode
            }
        }

# --- H√†m Voice Translation ---
def translate_with_google_api(text, source_lang='vi', target_lang='en'):
    """
    D·ªãch vƒÉn b·∫£n s·ª≠ d·ª•ng Google Translate API ho·∫∑c fallback methods
    """
    try:
        # Method 1: Try using Google Translate API if available
        if GOOGLE_API_KEY:
            import requests
            
            # Google Translate API endpoint
            url = f"https://translation.googleapis.com/language/translate/v2?key={GOOGLE_API_KEY}"
            
            payload = {
                'q': text,
                'source': source_lang,
                'target': target_lang,
                'format': 'text'
            }
            
            response = requests.post(url, data=payload)
            
            if response.status_code == 200:
                result = response.json()
                if 'data' in result and 'translations' in result['data']:
                    translated = result['data']['translations'][0]['translatedText']
                    print(f"Google Translate API success: {text[:50]}... -> {translated[:50]}...")
                    return translated
                else:
                    print("Google Translate API: Invalid response format")
            else:
                print(f"Google Translate API error: {response.status_code}")
        
        # Method 2: Fallback to Gemini AI for translation
        print("Fallback to Gemini AI translation...")
        return translate_with_gemini_ai(text, source_lang, target_lang)
        
    except Exception as e:
        print(f"Google Translate error: {e}, falling back to Gemini")
        return translate_with_gemini_ai(text, source_lang, target_lang)

def translate_with_gemini_ai(text, source_lang='vi', target_lang='en'):
    """
    Fallback translation using Gemini AI
    """
    try:
        if not GOOGLE_API_KEY:
            return "Translation unavailable: No API key configured"
        
        # Language mapping for better prompts
        lang_names = {
            'vi': 'Vietnamese',
            'en': 'English',
            'zh': 'Chinese',
            'ja': 'Japanese',
            'ko': 'Korean',
            'fr': 'French',
            'de': 'German',
            'es': 'Spanish'
        }
        
        source_name = lang_names.get(source_lang, source_lang)
        target_name = lang_names.get(target_lang, target_lang)
        
        prompt = f"""
You are a professional translator. Translate the following {source_name} text to {target_name}.

Rules:
- Provide ONLY the translation, no explanations
- Keep the same tone and style  
- Make it natural and conversational
- For Vietnamese to English: use casual, friendly English suitable for hotel/tourism context

Text to translate: "{text}"

Translation:
"""
        
        model = genai.GenerativeModel('gemini-2.0-flash-exp')
        response = model.generate_content(prompt)
        translated = response.text.strip()
        
        # Clean up the response (remove quotes if present)
        if translated.startswith('"') and translated.endswith('"'):
            translated = translated[1:-1]
        
        print(f"Gemini AI translation: {text[:50]}... -> {translated[:50]}...")
        return translated
        
    except Exception as e:
        print(f"Gemini translation error: {e}")
        # Last resort: return original with note
        return f"[Translation Error] {text}"

# --- Ch·∫°y ·ª©ng d·ª•ng ---
if __name__ == '__main__':
    # Ch·∫°y tr√™n c·ªïng t·ª´ environment variable ho·∫∑c m·∫∑c ƒë·ªãnh 8080 cho Koyeb
    port = int(os.getenv("PORT", 8080))
    app.run(host='0.0.0.0', port=port, debug=False)
